---
description: XAML based WPF
globs: 
alwaysApply: false
---
# PyRevit UI Style Guide
## Author: Ryan Combies

## Window Layout
- Use a clean, modern layout with consistent spacing
- Set reasonable minimum dimensions (e.g., MinWidth=400)
- Enable window resizing with grip (ResizeMode.CanResizeWithGrip)
- Use DockPanel as main container with LastChildFill=True
- Place action buttons at bottom of window
- Use ScrollViewer for main content area

## Margins and Spacing
- Window content: 10px margin all around
- Between major sections: 10px margin
- Between related controls: 5px margin
- Button height: 30px standard
- Input field width: 50px for numeric inputs

## Typography
- Use clear, descriptive headers for groups
- Main instructions: Regular text, wrapped
- Notes/descriptions: Italic, gray color (System.Windows.Media.Brushes.Gray)
- Status text: Bold for emphasis
- Error messages: Red color (System.Windows.Media.Brushes.Red)

## GroupBox Usage
- Group related controls with descriptive headers
- Use for logical separation of functionality
- Add 10px internal margin for content
- Add 10px margin between groups

## Modern GroupBox Style (Method 3)
- Use a custom template for consistent, modern appearance
- Apply rounded corners (CornerRadius="8") to the GroupBox border
- Position the header to overlap the top border with a negative margin
- Use light background color (#F8F8F8) for better visual separation
- Enable flexible sizing with the following techniques:
  - Set both HorizontalAlignment and VerticalAlignment to Stretch for resizable forms
  - Use MinWidth for content to ensure proper initial sizing
  - Add ScrollViewer for content when vertical scrolling may be needed
- Template example:
```xml
<Style x:Key="ModernGroupBox" TargetType="GroupBox">
    <Setter Property="BorderBrush" Value="#CCCCCC"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="8"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="GroupBox">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    
                    <!-- Background and border -->
                    <Border Grid.Row="0" Grid.RowSpan="2" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="8" Background="#F8F8F8"
                            Margin="0,-9,0,0"/>
                    
                    <!-- Header -->
                    <Border Grid.Row="0" Margin="8,0,8,0" Background="#F8F8F8">
                        <ContentPresenter ContentSource="Header" 
                                          TextBlock.FontWeight="Bold"
                                          RecognizesAccessKey="True"/>
                    </Border>
                    
                    <!-- Content -->
                    <ContentPresenter Grid.Row="1" 
                                      Margin="{TemplateBinding Padding}"/>
                </Grid>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>
```

### Header Position Fine-Tuning
- The header position is controlled by the `Margin` property of the background border
- Use negative top margin to position the header properly:
  - For smaller fonts (~12px): `Margin="0,-6,0,0"`
  - For standard fonts (~14px): `Margin="0,-9,0,0"`
  - For larger fonts (~16px): `Margin="0,-12,0,0"`
- To center the header text on the border, adjust the header Border's `Margin` property
- Test different values to achieve the desired look across different DPI settings

### Best Practices
- Use consistent colors across all GroupBoxes in your application
- Keep the same corner radius for all rounded elements (buttons, GroupBoxes)
- When implementing a resizable form:
  - Set minimum dimensions for the Window to prevent content from being cut off
  - Use `SizeToContent="WidthAndHeight"` for initial sizing but provide minimums
  - Apply ScrollViewers inside GroupBoxes for forms with dense content
- For forms with multiple GroupBoxes:
  - Keep the same width for all GroupBoxes in a column for visual alignment
  - Apply consistent spacing between GroupBoxes (8-10px recommended)

## Input Controls
- Label inputs clearly with units where applicable
- Show current/default values in input fields
- Add tooltips for additional context
- Use appropriate input validation
- Provide immediate feedback for invalid input
- Place units label next to input fields with vertical center alignment

## Button Standards
- Primary action: Left-aligned or full width
- Secondary actions: Right-aligned
- Cancel/Close: Always bottom-right
- Standard button height: 30px
- Use descriptive button text
- Add tooltips for additional context
- When using button grid, add 5px margin between buttons

## Status & Feedback
- Show processing status in UI
- Disable buttons during processing
- Update button text to indicate action in progress
- Use forms.alert() for important messages
- Log detailed progress to output window

## Visual Hierarchy
1. Main instructions at top
2. Input/configuration groups
3. Notes and additional info
4. Action buttons at bottom

## Color Usage
- Main text: Default system color
- Group headers: Default system color
- Notes: Gray (System.Windows.Media.Brushes.Gray)
- Success: Green (System.Windows.Media.Brushes.Green)
- Errors: Red (System.Windows.Media.Brushes.Red)
- Disabled: System default gray

## Standard Layout Structure
- Use DockPanel as the main container
- Create button panel at bottom using StackPanel
- Use Grid for button layouts with multiple buttons
- Use ScrollViewer for main content
- Use StackPanel for main content organization
- Use GroupBox to organize related controls

## Input Validation
- Validate numeric inputs immediately
- Show clear error messages
- Prevent invalid actions
- Restore previous/default values on error

## Progress & Processing
- Show processing status in UI
- Disable relevant controls during processing
- Provide cancel option for long operations
- Show batch progress for multiple items
- Log detailed progress to output window

## Settings Persistence
- Save user preferences using script.store_data()
- Load saved settings on startup
- Use reasonable defaults if no settings exist
- Preserve settings across sessions

## Error Handling
- Show user-friendly error messages
- Log detailed errors to output window
- Provide recovery options where possible
- Maintain UI responsiveness during errors
- Clean up resources in finally blocks

## Component Examples
```python
# Main window setup
self.Title = "Tool Name"
self.Width = 450
self.MinWidth = 400
self.SizeToContent = System.Windows.SizeToContent.Height
self.ResizeMode = System.Windows.ResizeMode.CanResizeWithGrip

# Main DockPanel
dock_panel = System.Windows.Controls.DockPanel()
dock_panel.LastChildFill = True

# Button panel
button_panel = System.Windows.Controls.StackPanel()
button_panel.Margin = System.Windows.Thickness(10)
System.Windows.Controls.DockPanel.SetDock(button_panel, System.Windows.Controls.Dock.Bottom)

# Primary button
primary_button = System.Windows.Controls.Button()
primary_button.Content = "Process"
primary_button.Height = 30
primary_button.Margin = System.Windows.Thickness(0, 0, 5, 0)
primary_button.ToolTip = "Start processing"

# Cancel button
cancel_button = System.Windows.Controls.Button()
cancel_button.Content = "Cancel"
cancel_button.Height = 30
cancel_button.Margin = System.Windows.Thickness(5, 0, 0, 0)

# Input with units
input_panel = System.Windows.Controls.StackPanel()
input_panel.Orientation = System.Windows.Controls.Orientation.Horizontal

value_input = System.Windows.Controls.TextBox()
value_input.Width = 50
value_input.Margin = System.Windows.Thickness(0, 0, 5, 0)

units_label = System.Windows.Controls.TextBlock()
units_label.Text = "units"
units_label.VerticalAlignment = System.Windows.VerticalAlignment.Center

# GroupBox for related controls
group_box = System.Windows.Controls.GroupBox()
group_box.Header = "Group Title"
group_box.Margin = System.Windows.Thickness(0, 0, 0, 10)

group_content = System.Windows.Controls.StackPanel()
group_content.Margin = System.Windows.Thickness(10)
group_box.Content = group_content

# Access system resources in XAML
app = System.Windows.Application.Current
app.Resources.MergedDictionaries.Add(
    System.Windows.ResourceDictionary()
    {
        Source = System.Uri("pack://application:,,,/PresentationFramework.Aero;component/themes/aero.normalcolor.xaml")
    }
)
```

## Implementation Examples

### Fixed-Size Form Implementation
For forms with fixed dimensions:
```xml
<GroupBox Header="Settings" Style="{StaticResource ModernGroupBox}"
          HorizontalAlignment="Center" Margin="0,0,0,10">
    <StackPanel Margin="5">
        <!-- Content here -->
    </StackPanel>
</GroupBox>
```

### Resizable Form Implementation
For forms that can be resized by the user:
```xml
<!-- Main form Grid -->
<Grid>
    <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    
    <!-- GroupBox that stretches with form -->
    <GroupBox Header="Tools" Style="{StaticResource ModernGroupBox}"
              Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        <ScrollViewer VerticalScrollBarVisibility="Auto">
            <StackPanel MinWidth="200" HorizontalAlignment="Center">
                <!-- Content here -->
            </StackPanel>
        </ScrollViewer>
    </GroupBox>
</Grid>
```

### In Code-Behind
Creating the modern GroupBox style in code:
```csharp
// Create modern GroupBox style
Style modernGroupBoxStyle = new Style(typeof(GroupBox));
modernGroupBoxStyle.Setters.Add(new Setter(GroupBox.BorderBrushProperty, new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC))));
modernGroupBoxStyle.Setters.Add(new Setter(GroupBox.BorderThicknessProperty, new Thickness(1)));
modernGroupBoxStyle.Setters.Add(new Setter(GroupBox.PaddingProperty, new Thickness(8)));

// Create template
ControlTemplate template = new ControlTemplate(typeof(GroupBox));
FrameworkElementFactory gridFactory = new FrameworkElementFactory(typeof(Grid));

// Set up row definitions
FrameworkElementFactory rowDef1 = new FrameworkElementFactory(typeof(RowDefinition));
rowDef1.SetValue(RowDefinition.HeightProperty, GridLength.Auto);
FrameworkElementFactory rowDef2 = new FrameworkElementFactory(typeof(RowDefinition));
rowDef2.SetValue(RowDefinition.HeightProperty, new GridLength(1, GridUnitType.Star));

// Add row definitions to grid
FrameworkElementFactory rowDefsFactory = new FrameworkElementFactory(typeof(Grid.RowDefinitions));
rowDefsFactory.AppendChild(rowDef1);
rowDefsFactory.AppendChild(rowDef2);
gridFactory.AppendChild(rowDefsFactory);

// Create background border
FrameworkElementFactory borderFactory = new FrameworkElementFactory(typeof(Border));
borderFactory.SetValue(Grid.RowProperty, 0);
borderFactory.SetValue(Grid.RowSpanProperty, 2);
borderFactory.SetValue(Border.BorderBrushProperty, new TemplateBindingExtension(GroupBox.BorderBrushProperty));
borderFactory.SetValue(Border.BorderThicknessProperty, new TemplateBindingExtension(GroupBox.BorderThicknessProperty));
borderFactory.SetValue(Border.CornerRadiusProperty, new CornerRadius(8));
borderFactory.SetValue(Border.BackgroundProperty, new SolidColorBrush(Color.FromRgb(0xF8, 0xF8, 0xF8)));
borderFactory.SetValue(Border.MarginProperty, new Thickness(0, -9, 0, 0));
gridFactory.AppendChild(borderFactory);

// Set template and apply style
template.VisualTree = gridFactory;
modernGroupBoxStyle.Setters.Add(new Setter(GroupBox.TemplateProperty, template));

// Apply style to GroupBox
myGroupBox.Style = modernGroupBoxStyle;
```

## Input Controls
