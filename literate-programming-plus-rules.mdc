---
description: 
globs: 
alwaysApply: true
---
# Literate Programming Rules

## Origins and Influences

These documentation rules draw from several key sources and methodologies in software documentation:

### 1. Literate Programming (Donald Knuth, 1984)
- **Core Concept**: Programs should be written to be read by humans first, machines second
- **Original Implementation**: WEB system for Pascal, combining TeX and Pascal
- **Key Principles**:
  - Documentation and code are treated as one unified entity
  - Code is explained in natural language
  - Program structure follows human logic rather than compiler requirements

### 2. Modern Documentation Systems
- **Python Docstrings**
  - Integrated documentation within code
  - Standardized formats (Google, NumPy, reStructuredText)
  - Tools like Sphinx for documentation generation

- **JavaDoc/JSDoc**
  - Structured API documentation
  - Type information and usage examples
  - Automated documentation generation

### 3. Contemporary Influences
- **Markdown-Driven Documentation**
  - GitHub's approach to documentation
  - README-driven development
  - Documentation as code (docs-as-code)

- **Visual Documentation**
  - Mermaid and PlantUML for diagrams
  - C4 model for system architecture
  - Architecture Decision Records (ADRs)

### 4. Custom Enhancements
These rules extend traditional approaches with:
- **Code Companion Pattern**
  - Separate but parallel documentation files
  - Direct line-number references
  - Progressive disclosure of concepts

- **Modern Development Practices**
  - Integration with IDEs
  - Version control friendly
  - Support for modern programming paradigms

### 5. Industry Standards Integration
- **Google Style Guides**
  - Clear, consistent documentation standards
  - Example-driven documentation
  - Accessibility considerations

- **Microsoft Documentation**
  - Conceptual/Reference/Tutorial structure
  - Task-based documentation
  - Progressive disclosure

## Overview
These rules establish standards for documenting code in a literate programming style, combining natural language explanations with code. The goal is to make code self-documenting and easily understandable by both humans and machines.

## Code-Aligned Documentation Structure

### 1. Linear Code Following
The documentation MUST follow the exact structure and flow of the source code:
- Document elements in the order they appear in the code
- Maintain the same hierarchical structure as the code
- Use line numbers to reference specific code sections
- Explain code elements as they are encountered

Example:
```markdown
## File: example.py

### Imports (lines 1-10)
```python
import sys
import os
```
These imports provide core system functionality...

### Constants (lines 12-20)
```python
MAX_RETRIES = 3
TIMEOUT = 30
```
These configuration constants control retry behavior...

### Helper Functions (lines 22-45)
```python
def validate_input(data):
    """Validate input data"""
```
This validation function ensures...
```

### 2. Context Preservation
- Each code section must be explained in its original context
- Previous code elements should be referenced when explaining dependencies
- Future code elements should not be referenced before their documentation
- Maintain a "first encounter" principle - fully explain concepts when first seen

### 3. Progressive Disclosure
Document code in layers:
1. First encounter: Full explanation with context
2. Subsequent uses: Reference back to original explanation
3. Modifications: Explain changes to previously documented behavior

## Document Structure

### 1. Code Companion File
- Create a CODE_COMPANION.md file in the same directory as the main code file
- Name should match the source file with "_COMPANION" suffix
- Use markdown format for rich text and diagrams
- Follow the exact structure of the source file

### 2. Section Organization
Each code section should be documented with:
```markdown
## Section Name (lines X-Y)

### Code
```python
# Relevant code snippet
```

### Purpose
Explanation of what this code does and why it exists

### Implementation Details
How the code works, in the context of what's been shown so far

### Usage
Examples using only previously documented code

### Dependencies
References to previously documented components
```

## Documentation Standards

### 1. Code Snippets
- Show minimal, relevant code sections
- Include line numbers for reference
- Use syntax highlighting
- Explain non-obvious code patterns

### 2. Visual Documentation
- Use Mermaid diagrams for:
  - Flow charts
  - Sequence diagrams
  - Component relationships
  - Data structures
- Include ASCII diagrams when Mermaid isn't suitable

### 3. Component Documentation
Each component should explain:
- Purpose (what and why)
- Implementation details (how)
- Usage examples
- Error handling
- Performance considerations

### 4. Cross-References
- Link related components
- Reference relevant documentation
- Cite external resources
- Maintain a dependency graph

## Implementation Guidelines

### 1. Constants and Configuration
Document:
```markdown
### Configuration Name
```python
CONFIG = {
    "key": "value"
}
```
- Purpose of each configuration item
- Impact of modifications
- Default values and their reasoning
```

### 2. Functions and Classes
Document:
```markdown
### Function/Class Name
```python
def function_name():
    """Docstring"""
```
- Input/Output specifications
- Side effects
- Error conditions
- Usage examples
- Performance characteristics
```

### 3. Data Structures
Document:
```markdown
### Structure Name
```python
data = {
    "key": "value"
}
```
- Data organization
- Access patterns
- Validation rules
- Performance implications
```

### 1. Code Flow Documentation
Document code flow in order of execution:
```markdown
### Processing Flow (lines X-Y)
1. First operation
   ```python
   data = load_data()
   ```
   Explains initial data loading...

2. Data transformation
   ```python
   result = transform(data)
   ```
   Explains transformation using previously documented transform function...

3. Final output
   ```python
   save_result(result)
   ```
   Explains how results are saved...
```

## Best Practices

### 1. Sequential Documentation
- Follow code order strictly
- Document dependencies as they're encountered
- Use line numbers for precise references
- Maintain forward continuity

### 2. Context Management
- Build understanding progressively
- Reference only previously explained concepts
- Maintain a clear dependency chain
- Use cross-references to previously documented sections

## Example Documentation

### Sequential Code Documentation Example
```markdown
## Data Processing Module (example.py)

### Import Section (lines 1-5)
```python
import pandas as pd
import numpy as np
```
These libraries provide our data processing capabilities:
- pandas: Used for DataFrame operations
- numpy: Used for numerical computations

### Configuration (lines 7-15)
```python
CONFIG = {
    "batch_size": 1000,
    "max_retries": 3
}
```
Configuration settings that control:
- batch_size: Number of records processed at once
- max_retries: Maximum retry attempts on failure

### Helper Functions (lines 17-45)
```python
def validate_batch(batch):
    """Validate a single batch of data"""
```
Validates each batch using the CONFIG["batch_size"] defined above...

[Continue following code structure...]
```

## Validation Checklist

- [ ] Documentation matches code structure
- [ ] All major components are documented
- [ ] Examples are up to date
- [ ] Diagrams reflect current architecture
- [ ] Cross-references are valid
- [ ] Performance implications are documented
- [ ] Error handling is explained
- [ ] Dependencies are listed
- [ ] Usage examples are complete
- [ ] Visual aids are clear and relevant
- [ ] Documentation follows code structure exactly
- [ ] Line numbers are included for all code sections
- [ ] Concepts are explained on first encounter
- [ ] Forward references are avoided
- [ ] Dependencies reference previous sections
- [ ] Code flow is documented sequentially
